# 24.08.26.(월) SWEA 10580. 전봇대 (D3)
# 전선이 복잡하게 꼬여있는 전봇대 두 개에 대하여 세 개 이상의 전선이 하나의 점에서 만나지 않는다고 가정한다면,
# 이 전봇대에는 총 몇 개의 교차점이 있는가?
# (두 전봇대는 N개의 전선으로 연결되어 있으며, 두 전선의 끝점이 같은 경우는 없으나 교차하는 경우는 있다.)

# 내가 생각한 로직
# 동일한 선상에 있는 전선을 제외하고, 두 전봇대에서의 높이가 다른 전선에 대해
# 높이가 1씩 증가할 때마다 일직선으로 그려진 전선이 있는지를 체크하고
# 해당 전선의 기울기(왼쪽 전봇대에서 오른쪽 전봇대로 이어지는 전선)가 아래와 같을 때,
# 1. 전선의 기울기가 +인 경우
#   - 다른 전선의 기울기가 - 인 경우
#       만약 다른 전선의 왼쪽 지점이 해당 전선의 왼쪽 지점보다 위에 있고,
#       다른 전선의 오른쪽 지점이 해당 전선의 오른쪽 지점보다 아래에 있는 경우 교차하는 것으로 간주 
#   - 다른 전선의 기울기가 +인 경우
#       만약 다른 전선의 왼쪽 지점이 해당 전선의 왼쪽 지점보다 아래에 있고 & 오른쪽 지점이 해당 전선의 오른쪽 전선의 위에 있는 경우
#       교차하는 것으로 간주

# 2. 전선의 기울기가 -인 경우
#   - 다른 전선의 기울기가 - 인 경우
#       만약 다른 전선의 왼쪽 지점이 해당 전선의 왼쪽 지점보다 위에 있고,
#       다른 전선의 오른쪽 지점이 해당 전선의 오른쪽 지점보다 아래에 있는 경우 교차하는 것으로 간주 
#   - 다른 전선의 기울기가 +인 경우
#       만약 다른 전선의 왼쪽 지점이 해당 전선의 왼쪽 지점보다 아래에 있고 & 오른쪽 지점이 해당 전선의 오른쪽 전선의 위에 있는 경우
#       교차하는 것으로 간주



import sys
sys.stdin = open('sample_input\sample_input(37).txt', 'r')

T = int(input())

for tc in range(1, T + 1):
    N = int(input())

    heights = [list(map(int, input().split())) for _ in range(N)]

    print(heights)


